{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction DoTypesSearch(query) {\n  _s();\n\n  const [typesData, settypesData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    let ignore = false;\n    const controller = new AbortController();\n\n    async function fetchSearchResults() {\n      let responseBody = {};\n      setLoading(true);\n\n      try {\n        const response = await fetch(` https://pokeapi.co/api/v2/type/${query}/`, {\n          signal: controller.signal\n        });\n        responseBody = await response.json();\n      } catch (e) {\n        if (e instanceof DOMException) {\n          console.log(\"== HTTP request cancelled\");\n        } else {\n          setError(true);\n          throw e;\n        }\n      }\n\n      if (!ignore) {\n        setLoading(false);\n        setError(false);\n        settypesData(responseBody);\n        console.log(\"response body\", responseBody);\n      }\n    }\n\n    if (query) {\n      fetchSearchResults();\n    }\n\n    return () => {\n      controller.abort();\n      ignore = true;\n    };\n  }, [query]);\n  console.log(typesData);\n  return [typesData, loading, error];\n}\n\n_s(DoTypesSearch, \"Fkgi5yF9/O09vVPP3LpvcDMSfGA=\");\n\n_c = DoTypesSearch;\nexport default DoTypesSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoTypesSearch\");","map":{"version":3,"sources":["/Users/jacoburenda/Documents/PokeApi-React.js/src/hooks/useTypesSearch.js"],"names":["useState","useEffect","DoTypesSearch","query","typesData","settypesData","loading","setLoading","error","setError","ignore","controller","AbortController","fetchSearchResults","responseBody","response","fetch","signal","json","e","DOMException","console","log","abort"],"mappings":";;AAAA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAE3B,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAEM,OAAF,EAAWC,UAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAEQ,KAAF,EAASC,QAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,MAAM,GAAG,KAAb;AACA,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AACA,mBAAeC,kBAAf,GAAoC;AAClC,UAAIC,YAAY,GAAG,EAAnB;AACAP,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAEzB,mCAAkCb,KAAM,GAFf,EAI1B;AAAEc,UAAAA,MAAM,EAAEN,UAAU,CAACM;AAArB,SAJ0B,CAA5B;AAMAH,QAAAA,YAAY,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAArB;AAED,OATD,CASE,OAAOC,CAAP,EAAU;AACV,YAAIA,CAAC,YAAYC,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD,SAFD,MAEO;AACLb,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,gBAAMU,CAAN;AACD;AACF;;AACD,UAAI,CAACT,MAAL,EAAa;AACXH,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAJ,QAAAA,YAAY,CAACS,YAAD,CAAZ;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,YAA7B;AACD;AACF;;AACD,QAAIX,KAAJ,EAAW;AACTU,MAAAA,kBAAkB;AAEnB;;AACD,WAAO,MAAM;AACXF,MAAAA,UAAU,CAACY,KAAX;AACAb,MAAAA,MAAM,GAAG,IAAT;AACD,KAHD;AAID,GAtCQ,EAsCN,CAAEP,KAAF,CAtCM,CAAT;AAuCAkB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,SAAZ;AACA,SAAO,CAAEA,SAAF,EAAaE,OAAb,EAAsBE,KAAtB,CAAP;AACD;;GA9CQN,a;;KAAAA,a;AA+CT,eAAeA,aAAf","sourcesContent":["import  { useState, useEffect } from 'react';\n\nfunction DoTypesSearch(query){\n\n  const [ typesData, settypesData ] = useState([]);\n  const [ loading, setLoading ] = useState(false);\n  const [ error, setError ] = useState(false);\n  useEffect(() => {\n    let ignore = false;\n    const controller = new AbortController();\n    async function fetchSearchResults() {\n      let responseBody = {};\n      setLoading(true);\n      try {\n        const response = await fetch(\n\n          ` https://pokeapi.co/api/v2/type/${query}/`,\n          \n          { signal: controller.signal }\n        );\n        responseBody = await response.json();\n\n      } catch (e) {\n        if (e instanceof DOMException) {\n          console.log(\"== HTTP request cancelled\")\n        } else {\n          setError(true);\n          throw e;\n        }\n      }\n      if (!ignore) {\n        setLoading(false);\n        setError(false);\n        settypesData(responseBody);\n        console.log(\"response body\", responseBody);\n      }\n    }\n    if (query) {\n      fetchSearchResults()\n\n    }\n    return () => {\n      controller.abort();\n      ignore = true;\n    }\n  }, [ query ]);\n  console.log(typesData)\n  return [ typesData, loading, error ];\n}\nexport default DoTypesSearch;\n"]},"metadata":{},"sourceType":"module"}